/**
 * 
 */
package com.reliance.gstn.util;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.SendFailedException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import org.apache.log4j.Logger;

/**
 * @author Nikesh.Bansod
 *
 */
public class SendEmailWithPdf {
	
	private static final Logger logger = Logger.getLogger(SendEmailWithPdf.class);

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	
	public static String sendMail(String from, String to, String cc, String bcc, String subject, String hostName, String pdfFilePath, String fileName) throws MessagingException{
		logger.info("Entry");
		logger.info("Email FROM : "+from+", TO : "+to+", cc : "+cc+", bcc : "+bcc+", subject : "+subject +", hostName : "+hostName+", pdfFilePath : "+pdfFilePath+", fileName : "+fileName);
		String text = "Disclaimer: This is a system generated email, please do not reply. The attached document has been generated by the seller using Bill Lite. Bill Lite does not own or claim any responsibility for the content of this email and attachments thereto. For any clarification, please contact the seller.";
		String s6 = "";
		String response = null;
		try {
			java.util.Properties properties = System.getProperties();

			properties.put("mail.smtp.host", hostName);
			Session session = Session.getInstance(properties, null);
			Message message = new MimeMessage(session);
			BodyPart messageBodyPart = new MimeBodyPart();
			messageBodyPart.setContent(message, "text/html");

			Multipart multipart = new MimeMultipart();

			InternetAddress From = new InternetAddress(from);
			// System.out.println("FROM - e-Mail -"+s1);
			message.setFrom(From);

			InternetAddress TO[] = InternetAddress.parse(to);
			// System.out.println("TO - e-Mail -"+s);
			message.setRecipients(javax.mail.Message.RecipientType.TO, TO);

			InternetAddress CC[] = InternetAddress.parse(cc);
			// System.out.println("CC - e-Mail -"+s2);
			message.setRecipients(javax.mail.Message.RecipientType.CC, CC);

			InternetAddress BCC[] = InternetAddress.parse(bcc);
			// System.out.println("BCC - e-Mail -"+s3);
			message.setRecipients(javax.mail.Message.RecipientType.BCC, BCC);

			message.setSubject(subject); // Set Subject
			messageBodyPart.setText(text); // Set text message part
			multipart.addBodyPart(messageBodyPart);

			try {
				 messageBodyPart = new MimeBodyPart();
				String filename = pdfFilePath;
				
			/*File contextDir1 = new File(filename);
			boolean lFileExists1 = contextDir1.exists();
			if (lFileExists1 && PdfValidCheck.PdfValidateCheck(filename1)) {*/
				DataSource source = new FileDataSource(filename);
				messageBodyPart.setDataHandler(new DataHandler(source));
			/*int indexOfferLetter = filename.lastIndexOf("/");
			String lFileOfferLetter = filename.substring(indexOfferLetter,filename.length());
			messageBodyPart.setFileName(lFileOfferLetter);*/
				messageBodyPart.setFileName(fileName);
				multipart.addBodyPart(messageBodyPart);
			/*}*/

				message.setContent(multipart);
	
				Transport.send(message);
				response = GSTNConstants.SUCCESS;
				logger.info("message sent....to " + to + " from " + from);
			}
			// catch (IOException ex) {ex.printStackTrace();}
			catch (MessagingException ex) {
				ex.printStackTrace();
				response = GSTNConstants.FAILURE;
				logger.error(ex);
				throw ex;
			}
		} catch (AddressException _ex) {
			s6 = "There was an error parsing the addresses.";
			logger.error(s6);
			response = GSTNConstants.FAILURE;
			throw _ex;
		} catch (SendFailedException _ex) {
			s6 = "There was an error sending the message.";
			logger.error(s6);
			response = GSTNConstants.FAILURE;
			throw _ex;
		} catch (MessagingException _ex) {
			s6 = "There was an unexpected error.";
			logger.error(s6);
			response = GSTNConstants.FAILURE;
			throw _ex;
		}
		logger.info("Exit");
		return response;	
	}

}
