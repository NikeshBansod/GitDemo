login_query=from UserMaster where userId =:userId and status = '1' and password =sha2(:password,256)
add_registration_query=INSERT INTO registration ( sp_name, cp_name,contact_no, primary_email, password, gstn_reg_number, pan_number, created_on, created_by ) VALUES ( :spName, :cpName, :contactNo, :primaryEmail, sha2(:password,256), :gstnRegNumber, :panNumber, :createdOn, :cpName );
validate_password_query=SELECT 1 from gst_user_master where ID = :uId and PASSWORD = sha2(:password,256)
change_password_query=update UserMaster set password = sha2(:newPassword,256), updatedOn = :updatedOn, updatedBy = :updatedBy where id = :id
update_pri_user=update UserMaster set userName = :userName, emailId = :emailId, updatedOn = :updatedOn, updatedBy = :updatedBy, secUserAadhaarNo = :secUserAadhaarNo,defaultEmailId =:defaultEmailId where id = :id
update_sec_user=update UserMaster set userName = :userName, emailId = :emailId, secUserAadhaarNo = :secUserAadhaarNo, updatedOn = :updatedOn, updatedBy = :updatedBy where id = :id
update_email_details =update UserMaster set defaultEmailId = :defaultEmailId  where id = :id
is_user_exist= from UserMaster where lower(userId) = :userId and status = '1'
user_remove_query=update UserMaster set status = :status, updatedOn = :updatedOn, updatedBy = :updatedBy where id = :id
#added to hard delete secondary user
user_remove_query_secondary=delete UserMaster where id = :id
primary_user_by_id=from UserMaster where id = :secondaryUserUId
sec_user_remove_query=from GSTINUserMapping where referenceUserId = :referenceUserId
#sec_user_by_id=select id, userName, contactNo from UserMaster where referenceId = :uId and status = '1'
sec_user_by_id=from UserMaster where referenceId = :uId and status = '1'
get_user_mobile_no=select contactNo from UserMaster where lower(userId) = :userId
recover_password_query=update UserMaster set password = sha2(:newPassword,256), updatedOn = :updatedOn where userId = :userId
is_user_mobile_exist= from UserMaster where contactNo = :contactNo and status = '1'
get_user_by_id=from UserMaster where id = :id
get_user_list_by_id=from UserMaster where id in (idValues)
get_mobile_login_count =update UserMaster set mobLoginCount = mobLoginCount + 1, lastLogin =:lastLogin  where userId = :userId
get_desktop_login_count =update UserMaster set deskLoginCount = deskLoginCount + 1, lastLogin =:lastLogin  where userId = :userId
#get_mobile_login_count =update UserMaster set mobLoginCount = mobLoginCount + 1  where userId = :userId
#get_desktop_login_count =update UserMaster set deskLoginCount = deskLoginCount + 1  where userId = :userId
add_footer_query=update OrganizationMaster set footer = :footer, updatedOn = :updatedOn, updatedBy = :updatedBy  where id = :id
get_total_invoice_count= select count(id) from InvoiceDetails where referenceId = :referenceId and invoiceDate like :invoiceDate group by documentType;
get_total_invoice_amount=select sum(invoiceValueAfterRoundOff) from InvoiceDetails where referenceId = :referenceId and invoiceDate like :invoiceDate group by documentType; 
update_org_master=update OrganizationMaster set cin =:cin, city=:city, state=:state, otherOrgType=:otherOrgType, termsConditionsFlagHidden=:termsConditionsFlagHidden, orgName=:orgName, orgType=:orgType, logoUploadFlag=:logoUploadFlag, logoImagePath=:logoImagePath, updatedBy=:updatedBy, updatedOn=:updatedOn where userMaster=:userMaster
get_org_by_id= from OrganizationMaster where userMaster=:userMaster
get_notificationdetails_by_contact= from PushNotificationDetails where contactNo = :contactNo
set_invoice_sequence=update UserMaster set invoiceSequenceType = :invoiceSequenceType  where id = :id

#Manage Service Catalogue
manage_Service_Catalogue_list_query=from ManageServiceCatalogue where referenceId = :referenceId and orgUid = :orgUid
manage_service_invoice_list_by_refid=from ManageServiceCatalogue where refOrgId = :orgUid and serviceIgst != 0 and storeId = :storeId order by id desc
manage_service_billofsupply_list_by_refid=from ManageServiceCatalogue where refOrgId = :orgUid and serviceIgst = 0 and storeId = :storeId order by id desc

manage_service_catalogue_remove_query=update ManageServiceCatalogue set status = :status, updatedOn = :updatedOn, updatedBy = :updatedBy where id = :id
manage_service_catalogue_list_by_refid=from ManageServiceCatalogue where status = '1' and refOrgId = :orgUid order by id desc
check_service_org_duplicacy=select p from ManageServiceCatalogue p where p.refOrgId= :orgRefId and p.name= :serviceName
unit_of_measurement_list_query = from UnitOfMeasurement 
get_service_list_by_id = from ManageServiceCatalogue where status = '1' and id IN ( ids) order by id desc
service_rate_of_tax_list_query=from ServiceRateOfTaxDetails order by taxRate
fetch_serviceName_list_by_autoComplete_query=select name from ManageServiceCatalogue where refOrgId = :orgRefId and status = '1' and name like :inputData
fetch_serviceName_list_of_invoice_by_autoComplete_query=select name from ManageServiceCatalogue where refOrgId = :orgRefId and status = '1' and name like :inputData and serviceIgst != 0 and storeId = :storeId 
fetch_serviceName_list_of_billOfSupply_by_autoComplete_query=select name from ManageServiceCatalogue where refOrgId = :orgRefId and status = '1' and name like :inputData and serviceIgst = 0 and storeId = :storeId
get_service_by_service_name=from ManageServiceCatalogue where refOrgId = :orgRefId and status = '1' and name like :inputData 
get_service_by_service_name_and_store_id=from ManageServiceCatalogue where refOrgId = :orgRefId and status = '1' and name like :inputData and storeId = :storeId
manage_service_catalogue_list_by_refid_Fetch=from ServiceFetch where status = '1' and refOrgId = :orgUid order by id desc
update_Service_Edit_Page=update ManageServiceCatalogue set name= :Newname ,serviceRate= :sellingPrice  ,serviceIgst= :tax  ,updatedOn= :updatedOn  ,updatedBy= :updatedBY where refOrgId= :refOrgId   and name = :Existingname

#pincode
get_pincode_details_by_pinno=select p.PINCODE,p.DISTRICT,p.STATE,s.STATE_NAME from  gst_pincode_master p ,gst_state_master s where p.PINCODE = :pinCode and s.ID = p.STATE
pincode_list_query=select distinct pinCode from PinCode order by pinCode
pincode_list_by_pincode_query=from PinCode where pinCode like :pincode
get_pincode_details_by_pinno_and_district=select p.PINCODE,p.DISTRICT,p.STATE,s.STATE_NAME from  gst_pincode_master p ,gst_state_master s where p.PINCODE = :pinCode and p.DISTRICT = :district and s.ID = p.STATE

#Customer
manage_customer_details_list_query=from CustomerDetails where refId = :referenceId and status=:status
customer_details_list_by_refid=from CustomerDetails where refOrgId in ( :refOrgId ) and status= '1' order by id desc
customer_name_by_refid=select custName from CustomerDetails where refId in ( :referenceId ) and status= '1' order by custName
customer_details_list_by_refid_and_custname=from CustomerDetails where refId in ( :referenceId ) and status= '1' and custName = :custName
check_customer_org_duplicacy=select p from CustomerDetails p where  p.contactNo= :custContact and p.refOrgId= :orgRefId and p.custName= :custName
get_customer_by_contactNo=from CustomerDetails where  contactNo= :custContact and refOrgId= :orgRefId 
get_customers_list_by_custName_and_contactNo_query=select distinct contactNo, custName from CustomerDetails where refOrgId = :orgRefId and status = '1' and (contactNo like :inputData or custName like :inputData)
get_registered_customers_list_by_custName_and_contactNo_query=select distinct contactNo, custName from CustomerDetails where refOrgId = :orgRefId and status = '1' and custType = 'Organization' and (contactNo like :inputData or custName like :inputData) 
get_customer_detail_by_custName_and_contactNo_query=from CustomerDetails where  contactNo like :contactNo and custName like :custName and refOrgId = :refOrgId

#SAC Code
sac_desc_list_from_saccode=select distinct sacCode, sacDescription from SACCode where (sacDescription like :sacDescription or sacCode like :sacCode ) order by sacDescription 
#sac_desc_list_from_saccode=select distinct sacCode, sacDescription from SACCode where (sacCode like :parameter || sacDescription like :parameter ) order by sacDescription
sac_code_list_by_sacdesc=select distinct sacCode from SACCode where  sacDescription = :sacCodeDescription
sac_code_by_stateid_and_saccode=from SACCode where sacCode = :sacCode and stateId = :stateId
igst_by_saccode=from SACCode where (sacCode = :sacCode and sacDescription like :sacDescription)

#state
state_list_query=from State
state_list_by_id=from State where stateId = :stateId
state_details_by_name=from State where stateName = :stateName
state_details_by_id=from State where stateId = :stateId
state_by_id=select id from State where stateName=:stateName
get_state_details_by_id=from State where id = :id 

#po details
manage_po_details_list_query=from PoDetails where refUserId = :referenceId and status=:status order by id desc
po_details_by_customer_id=select * from gst_po_master where customer_id = :poCustomerName and DATEDIFF(DATE_ADD(PO_VALID_TO_DATE,INTERVAL 90 DAY) ,CURDATE()) >=0
po_details_by_Product_id=from PoDetails where poAssocProductName = :prdId
check_po_no_duplicacy=select 1 from PoDetails p where p.orgRefId= :orgRefId and p.poNo= :poNo
add_product_service_mapping = INSERT INTO gst_po_service_product_mapping (PO_ID, SERVICE_PRODUCT_ID, PO_TYPE) VALUES (:poId, :serviceProductId, :poType);
get_prod_serv_mapping_list = from POServiceProductMapping where poId = :poId and poType=:type order by id desc
prod_serv_list_by_po_no = from POServiceProductMapping where poId = :poId order by id desc
get_product_service_mapping = from POServiceProductMapping where serviceProductId = :serviceProductId order by id desc

#manage Offer
manage_offers_list_query = from ManageOffers where referenceId in ( replace_referenceId ) and status = '1' and refOrgId = ?
manage_offers_remove_query=update ManageOffers set status = :status, updatedOn = :updatedOn, updatedBy = :updatedBy where id = :id
manage_offers_list_by_offertype=from ManageOffers where offerType = :offerType and offerTypeId = :offerTypeId  and discountValidDate >= CURDATE()
check_offer_org_duplicacy=select 1 from ManageOffers p where p.refOrgId= :orgRefId and p.offerName= :offerName

#Product
get_product_list=from Product where status = '1' and refOrgId = :refOrgId order by id desc
get_invoice_product_list=from Product where status = '1' and refOrgId = :refOrgId and productIgst != 0 and storeId = :storeId order by id desc
get_billofsupply_product_list=from Product where status = '1' and refOrgId = :refOrgId and productIgst = 0 and storeId = :storeId order by id desc
get_invoice_and_billofsupply_product_list=from Product where status = '1' and refOrgId = :refOrgId and storeId = :storeId order by id desc
product_remove_query=update Product set status = :status, updatedOn = :updatedOn, updatedBy = :updatedBy where id = :id
check_product_org_duplicacy=select 1 from Product p where p.refOrgId= :orgRefId and p.name= :productName
get_product_list_by_id = from Product where status = '1' and id IN ( ids) order by id desc
product_rate_of_tax_list_query=from ProductRateOfTaxDetails order by taxRate
get_product_by_product_name=from Product where refOrgId = :orgRefId and status = '1' and name like :inputData 
fetch_productName_list_by_autoComplete_query=select name from Product where refOrgId = :orgRefId and status = '1' and name like :inputData
fetch_productName_list_of_invoice_by_autoComplete_query=select name from Product where refOrgId = :orgRefId and status = '1' and name like :inputData and productIgst != 0 and storeId = :storeId 
fetch_productName_list_of_billOfSupply_by_autoComplete_query=select name from Product where refOrgId = :orgRefId and status = '1' and name like :inputData and productIgst = 0 and storeId = :storeId
fetch_productName_list_of_purchase_entry_invoice_and_billOfSupply_by_autoComplete_query=select name from Product where refOrgId = :orgRefId and status = '1' and name like :inputData and storeId = :storeId
get_product_by_product_name_and_store_id=from Product where refOrgId = :orgRefId and status = '1' and name like :inputData and storeId = :storeId
get_product_list_fetch=from ProductFetch where status = '1' and refOrgId = :refOrgId order by id desc
get_product_list_edit_page= from ProductFetch where status = '1' and refOrgId = :refOrgId  and name=:name 
update_product_edit_page=update Product set name= :Newname ,unitOfMeasurement= :SellingUom  ,otherUOM= :SellingOtherUom  ,productRate= :sellingPrice  ,productIgst= :tax  ,updatedOn= :updatedOn  ,updatedBy= :updatedBY  ,purchaseRate= :purchasePrice  ,purchaseUOM= :purchaseUom  ,purchaseOtherUOM= :OtherPurchaseUom   where refOrgId= :refOrgId   and name = :Existingname
delete_product=delete Product where name= :productName and refOrgId= :refOrgId
#GSTIN
gstin_details_list_query = from GSTINDetails where referenceId = :referenceId  and status = '1' and gstinNo is not null order by id desc
gstin_detail_remove_query=update GSTINDetails set status = :status, updatedOn = :updatedOn, updatedBy = :updatedBy where id = :id
gstin_details_by_ref_id=from GSTINDetails where status = '1' and id IN (idsValuesToFetch)
gstin_details_by_ref_user_id=from GSTINDetails where status = '1' and referenceId IN (idsValuesToFetch)
is_gstin_registered = from OrganizationMaster where lower(gstinNumber) = :gstinNumber 
is_gstin_reg_with_org=from GSTINDetails where gstinNo = :gstinNumber and referenceId = :uid
gstin_by_gstin_no = from GSTINDetails where gstinNo = :gstinNo and referenceId = :referenceId
gstin_validation_with_pan = from OrganizationMaster where lower(panNumber) = :panNumber and id = :orgId
gstin_location_details_list_query= from GstinLocation where refGstinId = :refGstinId order by id desc
gstin_location_details_query = from GstinLocation where id = :refGstinId order by id desc
get_gstin_mapped_for_secondary_user=from GSTINDetails where id in ( select gstinId from UserGSTINMapping where id in ( idsValuesToFetch ))
gstin_details_list_city_query=select g.id,g.GSTIN_NO,g.GSTN_NICKNAME,g.STATE,a.CITY from  gst_gstin_master g , gst_gstin_address_map a where g.REF_ADDRESS_ID=a.ID and g.REF_USER_ID=:referenceId and g.`STATUS`="1" and g.GSTIN_NO is not null order by g.id desc

get_invoice_details_for_gstin_no=from InvoiceDetails where gstnStateIdInString = :gstinNo
get_purchase_entry_details_for_gstin_no=from PurchaseEntryDetails where gstnStateIdInString = :gstinNo
get_gstn_details_by_id=from GSTINDetails where id = :id and status='1'


#GSTIN User
gstin_user_list_query=from GSTINUserMapping where status = '1' and referenceId IN (replace_referenceId)
gstin_user_remove_query=update GSTINUserMapping set status = :status, updatedOn = :updatedOn, updatedBy = :updatedBy where id = :id
gstin_user_by_refuser=from GSTINUserMapping where status = '1' and referenceUserId = :referenceUserId
check_user_mapping_duplicacy=select 1 from GSTINUserMapping p where p.referenceUserId= :referenceUserId
user_gstin_list_query=from UserGSTINMapping where status = '1' and referenceUserId IN (replace_referenceId)
check_gstin_user_mapping_exist=from UserGSTINMapping p where p.gstinId= :gstinId and p.gstinAddressMapping is null
check_gstin_user_loc_mapping_exist=from UserGSTINMapping p where p.gstinId= :gstinId and p.gstinAddressMapping.id = :locId
get_user_gstin_mapping=select gstin_id from gst_gstin_user_map where user_id = :uId
get_location_by_gstin_and_user_id=select * from gst_gstin_location_master where id in (select ref_address_id from gst_user_gstin_mapping where ref_gstin_id = :gstinId and id in (select gstin_id from gst_gstin_user_map where user_id = :uId))
get_gstin_user_by_org_id=from UserGSTINMapping where refOrgId = :refOrgId
get_user_gstin_mapping_by_gstin =from UserGSTINMapping p where p.gstinId= :gstinId 
get_gstin_location_by_gstin =from GstinLocation l where l.refGstinId= :refGstinId 

#HSN Code
hsn_details_list_query = from HSNDetails
igst_by_hsnCode=from HSNDetails where (hsnCode = :hsnCode and hsnDesc = :hsnDesc)
hsn_desc_list_from_hsncode=select distinct hsnCode, hsnDesc,id from HSNDetails where (hsnDesc like :hsnDesc or hsnCode like :hsnCode ) order by hsnDesc
hsn_code_list_by_hsndesc=select distinct hsnCode from HSNDetails where  hsnDesc = :hsnCodeDescription
hsn_by_code_and_state=from HSNDetails where hsnCode = :hsnCode and stateId = :stateId
hsn_details_list_limit_100_query=from HSNDetails order by id desc

#SAC Code
sac_details_list_limit_100_query=from SACCode order by id desc
#PAN
is_pan_registered = from OrganizationMaster where lower(panNumber) = :panNumber

#Organization Type
organization_query =from OrganizationType

#Nature Of Business
nature_of_business_list=from NatureOfBusiness

#invoiceDetails

invoice_detail_list_by_po_details=from InvoiceDetails where poDetails.id = :poDetailId
sgst_ratio=50.00
cgst_ratio=50.00
diff_percentage_ratio=65.00
invoice_detail_by_org_uid=from InvoiceDetails where orgUId = :orgUId and deleteYn ='N' order by id desc
validate_invoice_by_orgId=from InvoiceDetails where orgUId = :orgUId and id = :id

invoice_details_by_org_uid=select id, invoiceNumber, invoiceValueAfterRoundOff, createdOn, customerDetails.custName as custName, gstnStateIdInString, invoiceDate from InvoiceDetails where orgUId = :orgUId and deleteYn = 'N' order by id desc
only_invoices_by_org_uid=select id, invoiceNumber, invoiceValueAfterRoundOff, createdOn, customerDetails.custName as custName, gstnStateIdInString, invoiceDate from InvoiceDetails where orgUId = :orgUId and deleteYn = 'N' and documentType = 'invoice' order by id desc
only_billOfSupply_by_orgUId=select id, invoiceNumber, invoiceValueAfterRoundOff, createdOn, customerDetails.custName as custName, gstnStateIdInString, invoiceDate from InvoiceDetails where orgUId = :orgUId and deleteYn = 'N' and documentType = 'billOfSupply' order by id desc
only_rc_invoices_by_orgUId=select id, invoiceNumber, invoiceValueAfterRoundOff, createdOn, customerDetails.custName as custName, gstnStateIdInString, invoiceDate from InvoiceDetails where orgUId = :orgUId and deleteYn = 'N' and documentType = 'rcInvoice' order by id desc
only_ecom_invoices_by_orgUId=select id, invoiceNumber, invoiceValueAfterRoundOff, createdOn, customerDetails.custName as custName, gstnStateIdInString, invoiceDate from InvoiceDetails where orgUId = :orgUId and deleteYn = 'N' and documentType = 'eComInvoice' order by id desc
only_ecom_billOfSupply_by_orgUId=select id, invoiceNumber, invoiceValueAfterRoundOff, createdOn, customerDetails.custName as custName, gstnStateIdInString, invoiceDate from InvoiceDetails where orgUId = :orgUId and deleteYn = 'N' and documentType = 'eComBillOfSupply' order by id desc
remove_service_items_query=Delete from InvoiceServiceDetails where id in 
check_invoice_number_by_orgId=from InvoiceDetails where orgUId = :orgUId and invoiceNumber = :invoiceNumber

#gstin Address Map
gstin_address_from_gstin_no=select * from gst_gstin_address_map where REF_GSTIN_ID = :gstinId

#OTPDetails
get_otp_rec=from OtpVerificationDetails where mobileNo = :mobileNo 
add_otp_rec=INSERT INTO gst_otp_record_details (CONTACT_NO, OTP, LAST_OTP_TIME, NO_OF_ATTEMPT) VALUES (:contactNo, :otpNo, :otpTime, :noOfattempt);

no_of_otp = 3
otp_idle_duration_min = 30
otp_idle_duration_hour = 1

#Unique Sequence
get_unique_sequence=select unique_sequence from gst_unique_sequence_master where id = ((select id from gst_unique_sequence_master where unique_sequence=(select max(unique_sequence) from targetTable where refColumn is null or  refColumn=:id))+1);
get_location_unique_sequence=select unique_sequence from gst_unique_sequence_master where id between ((select id from gst_unique_sequence_master where unique_sequence=(select max(unique_sequence) from targetTable where refColumn is null or  refColumn=:refId))+1) and ((select id from gst_unique_sequence_master where unique_sequence=(select max(unique_sequence) from targetTable where refColumn is null or  refColumn=:refId))+:locSize);
get_initial_location_sequence=select unique_sequence from gst_unique_sequence_master where id between (select id from gst_unique_sequence_master where unique_sequence='1' ) and (select id from gst_unique_sequence_master where unique_sequence='1' )+(:listSize)

#Checking Valid Mapping
is_sec_user_mapping_valid=select id from UserMaster where referenceId=:refOrgId and id=:secId and userRole='SECONDARY'
is_sec_user_customer_mapping_valid=select id from CustomerDetails where refId=:refId and id=:custId 
is_prim_user_customer_mapping_valid=select id from CustomerDetails where refId in(select id from UserMaster where referenceId=:refId ) and id=:custId or refId=:refId
get_prim_id_list_query=select id from targetTable where refColumn in (refIdColumn) and status= '1' order by id desc

#Login Attempt Restriction
login_attempt_query=from LoginAttempt where userId = :userId 
max_no_of_login_attempt=3

#Additional Charge
add_charges_details_list_by_refid=from AdditionalChargeDetails where refOrgId in (:refOrgId) and status= '1' order by id desc
manage_add_charges_details_list_query=from AdditionalChargeDetails where referenceId = :referenceId and status=:status
additional_rate_of_tax_list_query=from AdditionalChargeRateOfTaxDetails
fetch_additional_charges_list_autoComplete_query=select chargeName from AdditionalChargeDetails where refOrgId = :orgRefId and status = '1' and chargeName like :inputData
fetch_additional_charges_list_by_charge_name=from AdditionalChargeDetails where refOrgId = :orgRefId and status = '1' and chargeName like :inputData

#Notification
notification_list_query=from Notifications where status = '1' order by updatedOn desc

#Admin Login
admin_login_query=from AdminUserMaster where userId =:userId and status = '1' and password =sha2(:password,256)
get_feedback_details=select b.userId, c.orgName, c.panNumber, a.feedbackDesc, a.createdOn from FeedbackDetails as a, UserMaster as b, OrganizationMaster as c where a.userId = b.id and a.orgId = c.id and a.masterDescDetails = :masterDesc order by a.createdOn desc  

#ORG Logo Update
org_logo_update=update OrganizationMaster set logoUploadFlag='Y',logoImagePath=:flePathWithName where id=:orgUId
get_org_logo_path=from  OrganizationMaster where id=:orgUId

#ASP User Details
asp_user_details_by_userid=from AspUserDetails where referenceId = :referenceId
get_upload_history_by_gstin_user= from GstrUploadDetails where gstin = :gstin
get_upload_type_by_gstin_no=select uploadType from GSTINDetails where gstinNo = :gstinNo
get_last_uploaded_data_by_gstin=from GstrUploadDetails where gstin = :gstin and fpPeriod =:financialPeriod order by uploadDate desc


#Upload Invoice to ASP
invoice_details_by_gstin=from InvoiceDetails where gstnStateIdInString = :gstinId  and DATE_FORMAT(invoiceDate,'%m%Y')=:invoiceDate
org_name_by_id= from OrganizationMaster where id = :orgUId
get_gstr_details = from GstrUploadDetails where userId = :uid and gstin = :gstin and fpPeriod = :fpPeriod and actionTaken =:actionTaken
# and status = :status
update_upload_setting = update GSTINDetails set uploadType =:uploadType where gstinNo=:gstinNo
get_cndn_invoice_details=from PayloadCnDnDetails c where c.invoiceDetails.gstnStateIdInString=:gstin and DATE_FORMAT(c.createdOn,'%m%Y')=:createdOn
check_gstin_query=select gstinNo from GSTINDetails where gstinNo=:gstinNo and referenceId=:uId
invoice_details_by_id=from InvoiceDetails where id = :id
get_cndn_invoice_details_by_invoice=from PayloadCnDnDetails c where c.invoiceDetails.id=:id

update_invoice_delete_status= update InvoiceDetails set deleteYn = 'Y' , uploadToJiogst = 'false' , saveToGstn = 'false'   where id= :id
update_invoice_cndn_delete_status= update PayloadCnDnDetails set deleteYn = 'Y' , uploadToJiogst = 'false' , saveToGstn = 'false' where id in ( :ids ) 

invalid_setting_time_hour = 23
invalid_setting_time_minute = 58

#CN-DN Reason
cndn_reason_list_query=from CnDnReason

#PurchaseEntry
get_max_invoice_number_seq = select max(purchase_entry_invoice_number) from gst_purchase_entry_details where purchase_entry_invoice_number like :pattern and  ref_org_uId = :orgUId
purchase_entry_details_by_org_uid=select purchaseEntryDetailsId, purchaseEntryGeneratedInvoiceNumber, supplierName, invoiceValueAfterRoundOff, createdOn ,invoiceNumber, purchaseDate from PurchaseEntryDetails where orgUId = :orgUId and deleteYn = 'N' order by id desc
validate_purchase_entry_invoice_by_orgId=from PurchaseEntryDetails where orgUId = :orgUId and purchaseEntryDetailsId = :purchaseEntryDetailsId
update_purchase_entry_delete_status= update PurchaseEntryDetails set deleteYn = 'Y' where purchaseEntryDetailsId= :id

#Feedback 
master_desc_list_query = from MasterDescDetails

#eway bill

get_nic_user_details= from NicUserDetails where gstin= :gstin and userId= :nic_id  and ref_org_uId= :ref_org_uId
get_nic_user_details2=from NicUserDetails where gstin= :gstin and userId= :nic_id  and AUTH_USER_ID= :AUTH_USER_ID
get_ewaybill_details= from EWayBill where gstin= :gstin and ewaybillNo = :ewayBillNo  and ref_org_uId= :ref_org_uId
nic_details_gstin_and_orgid=from NicUserDetails where gstin= :gstin and AUTH_USER_ID= :AUTH_USER_ID
get_eway_bill_details = from EWayBill where  invoiceId = :invoiceId order by id desc
get_eway_bill_by_org_id=from EWayBill where ref_org_uId = :orgUId and id = :id
get_ewaybill_listCustomer=select  e.ewaybill_no, c.CUST_NAME, i.invoice_number, e.ewaybill_date, e.mode_of_transport_desc, e.ewaybill_status, e.ewaybill_valid_upto, e.bill_id from  gst_eway_bill e, gst_customer_master c, gst_invoice_details i  where e.invoice_id=i.invoice_id and i.customer_id = c.ID and e.invoice_id= :id and e.ref_org_uId= :orgUId

#for wizard 
get_wizard_master_query=from EwayBillWIMaster where masterType=:masterType and isActive=:isActive
get_wizard_master_children_query=select master_name,master_code from ewb_wi_master where parent_id=:parentId
get_wizard_document_master_query=from EwayBillWIMaster where masterType=:masterType and isActive=:isActive and masterSubType = :masterSubType

get_eway_bills=select ewaybillNo,ewaybill_date,ewaybill_valid_upto,ewaybillStatus,toTraderName, transModeDesc from EwayBillWITransaction where  userId = :userId    order by ewayBillWITransId desc 
get_ewaybill_bynumber=from EwayBillWITransaction where  userId = :userId    and ewaybillNo= :ewaybillNo 
get_ewaybill_by_ewaybillno = from EWayBill where ewaybillNo = :ewaybillNo   
get_ewb_customerbonboardedList=from NicUserDetails where gstin= :gstin   and  authUserId= :AUTH_USER_ID 

# for Dashboard 

eway_bill_count=select count(ewaybillNo) from EwayBillWITransaction where STR_TO_DATE(ewaybill_date,'%d/%m/%Y') between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and userId= :userId  
cndn_query=select count(a.invoice_number) as count from gst_invoice_cn_dn_additional_details a, gst_invoice_cn_dn_additional_mapping b ,gst_invoice_details c where cast(a.created_on as date) between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and a.ref_org_uId =:uID and a.invoice_cn_dn_additional_pk_id = b.invoice_cn_dn_additional_pk_id and b.invoice_id=c.invoice_id and c.delete_status ='N'
invoice_query=select count(invoiceNumber) from InvoiceDetails where cast(invoiceDate as date) between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and orgUId = :uID and deleteYn = 'N'
invoice_list_equery=select id, invoiceNumber, invoiceValueAfterRoundOff, createdOn, customerDetails.custName as custName, gstnStateIdInString from InvoiceDetails where cast(invoiceDate as date) between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and orgUId = :uID and deleteYn = 'N' order by id desc 
cndn_list_query=select a.iteration_no,a.invoice_cn_dn_additional_pk_id,a.invoice_number inv1,b.invoice_id,c.invoice_number inv2 from gst_invoice_cn_dn_additional_details a, gst_invoice_cn_dn_additional_mapping b ,gst_invoice_details c where cast(a.created_on as date) between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and a.ref_org_uId =:uID and c.delete_status ='N'and a.invoice_cn_dn_additional_pk_id = b.invoice_cn_dn_additional_pk_id and b.invoice_id=c.invoice_id order by id desc
ewaybill_list_query=select userId,ewaybillNo,ewaybillStatus from EwayBillWITransaction where STR_TO_DATE(ewaybill_date,'%d/%m/%Y') between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and userId=:uID order by ewayBillWITransId desc
get_invoiceid_by_cndn=select id from invoiceDetails c where c.CnDnAdditionalDetails.id=:id
dash_product_details= from PayloadCnDnDetails where cndnNumber = :cndnNumber
dash_invoice_CNDN_details=from CnDnAdditionalDetails where id = :cId
invoice_ewaybill_count=select count(ewaybillNo) from EWayBill where STR_TO_DATE(ewaybill_date,'%d/%m/%Y') between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and ref_org_uId=:orgUId
invoice_ewaybill_list_query=select  invoiceId,ewaybillNo,ewaybillStatus,id from EWayBill where STR_TO_DATE(ewaybill_date,'%d/%m/%Y') between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and ref_org_uId=:uID order by id desc 
ewayBill_WI_Item_Details= from EwayBillWIItem a,EwayBillWITransaction b where b.ewayBillWITransId=:ewayBillWITransId and a.ewayBillWITransaction=b.ewayBillWITransId
invoice_EWayBill_Details=from EWayBill where ewaybillNo = :ewaybillNo

#feedbackListQuery
feedback_Details_List_Query= from FeedbackDetails where userId =:uId order by createdOn desc
feedback_Details_Query=from FeedbackDetails where userId =:uId and id=:id
master_Desc_Query=from MasterDescDetails where id =:masterDescDetails
all_master_Desc_Query=from MasterDescDetails


#forAdminDashboard

admin_total_invoice_query= select count(invoiceNumber) from InvoiceDetails where cast(invoiceDate as date) between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') 
admin_mobile_invoice_query= select count(invoiceNumber) from InvoiceDetails where cast(invoiceDate as date) between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and generatedThrough= 'MOBILE'
admin_desktop_invoice_query= select count(invoiceNumber) from InvoiceDetails where cast(invoiceDate as date) between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and generatedThrough= 'WIZARD'
admin_generic_eway_bill_count=select count(ewaybillNo) from EwayBillWITransaction where STR_TO_DATE(ewaybill_date,'%d/%m/%Y') between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y')
admin_invoice_eway_bill_count=select count(ewaybillNo) from EWayBill where STR_TO_DATE(ewaybill_date,'%d/%m/%Y') between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') 
admin_mobile_generic_eway_bill_count=select count(ewaybillNo) from EwayBillWITransaction where STR_TO_DATE(ewaybill_date,'%d/%m/%Y') between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and appName='38' 
admin_desktop_generic_eway_bill_count=select count(ewaybillNo) from EwayBillWITransaction where STR_TO_DATE(ewaybill_date,'%d/%m/%Y') between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and appName='39' 
admin_mobile_invoice_eway_bill_count=select count(ewaybillNo) from EWayBill where STR_TO_DATE(ewaybill_date,'%d/%m/%Y') between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and generatedThrough ='MOBILE'
admin_desktop_invoice_eway_bill_count=select count(ewaybillNo) from EWayBill where STR_TO_DATE(ewaybill_date,'%d/%m/%Y') between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and generatedThrough ='WIZARD'
admin_wizard_generic_eway_bill_count=select count(ewaybillNo) from EwayBillWITransaction where STR_TO_DATE(ewaybill_date,'%d/%m/%Y') between STR_TO_DATE(:startdate,'%d-%m-%Y') and STR_TO_DATE(:enddate,'%d-%m-%Y') and appName='37' 


#GSTR1OTPresponse
gstr1_otp_response_query=from Gstr1OtpResponseEntity where gstin=:gstin

#WizardSaveToJioGst

get_user_details_for_otp= select id, gstin, fp, appkey, sek, authtoken, ref_exp, ses_exp, ses_gen_time, tk_gen_time from Gstr1OtpResponseEntity where gstin= :gstin
set_user_details_for_session= from Gstr1OtpResponseEntity where gstin=:gstin

#set_invoice_status
set_invoice_status=from InvoiceDetails where gstnStateIdInString = :gstinId  and DATE_FORMAT(invoiceDate,'%m%Y')=:invoiceDate and id=:id

get_gstr3b_by_ackno=from Gstr3bUploadDetails where ackNo=:ackNo
 get_gstr3b_jiogst_list=from Gstr3bUploadDetails where userId=:userId
 
#advol and Non Advol CESS rate
advol_cess_list_query= from AdvolCessRateDetails
non_advol_cess_list_query= from NonAdvolCessRateDetails

get_ewaybill_rateList= from EwayBillRateMaster


#check invoice list at complinace wheher its already upload or not

invoice_details_by_gstin_for_upload=from InvoiceDetails where gstnStateIdInString = :gstinId  and DATE_FORMAT(invoiceDate,'%m%Y')=:invoiceDate


#check Cndn list at complinace wheher its already upload or not
cndn_details_by_gstin_for_upload=from PayloadCnDnDetails c where c.invoiceDetails.gstnStateIdInString=:gstin and DATE_FORMAT(c.createdOn,'%m%Y')=:createdOn
 
#get product details using storeid and productid
 product_details_by_storeid_and_productid=from  Product where id = :productId  and  storeId = :storeId
 
  #get product details using storeid and productid
 product_details_by_storeid_and_productid_orgId=from  Product where  storeId = :storeId and refOrgId = :refOrgId and name =:name
 
 #update stock details using storeid and productid
 update_product_details_by_storeid_product_id=update Product p set currentStockValue = :currentStockValue,currentStock=:currentStock,openingStock=:openingStock,openingStockValue=:openingStockValue where purchaseEntryDetailsId= :id where p.id=:productId and p.store_id=:storeId
 
 #get product and inventory details for unique sequence
 get_product_details_org_id = select i.DOCUMENT_NO,p.ID,p.REF_ORG_ID,p.PRODUCT_NAME from gst_inventory_details i,gst_product_master p where i.productId=p.id and p.refOrgId = :refOrgId
 #get product and inventory details for till date 
 get_product_details_org_id_storeId_name=select distinct P.ID as PRODUCT_ID,P.HSN_CODE,P.PRODUCT_NAME,P.UPDATED_ON, P.OPENING_STOCK,I.TRANSACTION_DATE,I.QUANTITY,I.UPDATE_TYPE,I.CREDIT_DEBIT_VALUES,P.CURRENT_STOCK,P.UNIT_OF_MEASUREMENT,P.STORE_ID,P.INVENTORY_UPDATE,P.CURRENT_STOCK_VALUE,P.REF_ORG_ID fromgst_inventory_details I RIGHT JOIN gst_product_master P ON I.PRODUCT_ID = P.ID where P.STORE_ID=:storeId  and I.TRANSACTION_DATE <=:transactionDate and P.PRODUCT_NAME=:name and P.REF_ORG_ID=:refOrgId order by P.ID,UPDATED_ON"
 
 
 #rr
 rr_list_query=from ReviseAndReturn
 revised_and_return_details_List_Query=select c.created_document_no,c.created_on,a.CUST_NAME,c.document_type,c.rr_type,c.original_invoice_no,c.original_invoice_pk_id,c.iteration_no,c.created_document_pk_id,c.cndn_iteration_no from gst_customer_master a,gst_invoice_details b,gst_revise_and_return_history c where b.invoice_number = c.original_invoice_no and b.customer_id = a.ID and c.ref_org_id=:orgId order by created_on desc


#rr history
validate_Invoice_History_By_OrgId_Query=from InvoiceDetails where orgUId = :orgUId and id = :id
get_InvoiceDetails_By_Id_And_IterationNo = from InvoiceDetails where id = :id and iterationNo = :iterationNo
get_InvoiceDetails_History_By_Id_And_IterationNo=select * from gst_invoice_details_history where invoice_id = :id and iteration_no = :iterationNo 
get_ProductDetails_History_By_Id_And_IterationNo = select distinct a.* from gst_invoice_service_details_history a, gst_invoice_details b ,gst_invoice_service_mapping_history c where b.invoice_id = c.invoice_id and b.invoice_id = :id and a.iteration_no = :iterationNo and a.invoice_service_pk_id = c.invoice_service_pk_id
get_addChargesDetails_History_By_IdAndIterationNo = select a.* from gst_invoice_additional_charges_details_history a , gst_invoice_details b ,gst_invoice_service_mapping_history c where b.invoice_id = c.invoice_id and b.invoice_id = :id and a.iteration_no = :iterationNo and a.invoice_additional_charge_pk_id = c.invoice_service_pk_id
#get_InvoiceDetails_History_By_Id_for_RRHistory=select * from gst_invoice_details_history where invoice_id = :id  order by iteration_no desc 
get_InvoiceDetails_By_Id_for_RRHistor = from InvoiceDetails where id = :id order by iterationNo desc


#Unique Sequence for document number
get_maxunique_docsequence=select distinct i.DOCUMENT_NO from gst_inventory_details i,gst_product_master p where i.product_Id=p.id and i.DOCUMENT_NO like :pattern and  p.ref_Org_Id = :orguId";


get_gst_max_unique_docsequence=select Id from gst_unique_docsequence_master where unique_sequence = (SELECT max(tt.unique_sequence) FROM gst_unique_docsequence_master tt INNER JOIN (select substr(i.DOCUMENT_NO,13,14) as Counter from gst_inventory_details i,gst_product_master p where i.DOCUMENT_NO like :pattern and  p.ref_Org_Id = :orgUId ) groupedtt where tt.UNIQUE_SEQUENCE = groupedtt.Counter) limit :size
get_initial_unique_docsequence = select UNIQUE_SEQUENCE from gst_unique_docsequence_master limit :size
get_uniqueSequenece_doc = select u.UNIQUE_SEQUENCE from gst_unique_docsequence_master u where u.id = :id


#check orgid and store id validation
check_storeid_with_orgid = select c.ID  from  gst_gstin_location_master a, gst_gstin_master b , gst_organization_master c where a.ref_gstin_id = b.ID and b.REF_USER_ID = c.REF_USER_ID and a.id = :locationId

#Inventory
fetch_productName_list_Of_inventory_by_autoComplete_query=select name from Product where refOrgId = :orgRefId and status = '1' and name like :inputData and storeId = :storeId
fetch_history_of_inventory=select I.`ACTION`,I.TRANSACTION_DATE,I.DOCUMENT_NO,I.SELECTED_REASON,P.PRODUCT_NAME,P.UNIT_OF_MEASUREMENT,P.PRODUCT_RATE,L.gstin_location,GM.GSTIN_NO,GM.GSTIN_USER_NAME,P.PURCHASE_RATE,P.OPENING_STOCK,P.OPENING_STOCK_VALUE,P.CURRENT_STOCK,P.CURRENT_STOCK_VALUE,P.INVENTORY_UPDATE,I.UPDATE_TYPE,I.CREDIT_DEBIT_VALUES from gst_inventory_details I , gst_product_master P, gst_gstin_location_master L,gst_gstin_location_map LM,gst_gstin_master GM where I.PRODUCT_ID=P.ID and P.STORE_ID= L.id and P.STORE_ID=LM.location_id and LM.gstin_id=GM.id and I.TRANSACTION_DATE is not null and I.DOCUMENT_NO is not null order by I.TRANSACTION_DATE

#suppliers in purchase Entry
get_Registered_SupplierList_BySupplierName_AndContactNo_Query = select distinct contactNo, custName from CustomerDetails where refOrgId = :orgRefId and status = '1' and custPartyType = 'Supplier' and (contactNo like :inputData or custName like :inputData) 

#unification  get emailId
get_user_emailId= from UserMasterUnification u where u.contactNo=:contactNo

